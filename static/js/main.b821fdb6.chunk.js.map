{"version":3,"sources":["components/Card/index.jsx","components/Board/index.jsx","deck.js","index.js","App.jsx"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","ReactDOM","render","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","preLoadImages","Image","resetCards","sameCardClicked","isMatch","clickType","min","document","documentElement","clientWidth","clientHeight","isArgumentPlaceholder","setTimeout","getElementById"],"mappings":"4LAKe,SAASA,EAAT,GASX,IARFC,EAQC,EARDA,YACAC,EAOC,EAPDA,GACAC,EAMC,EANDA,KACAC,EAKC,EALDA,QACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,MACAC,EACC,EADDA,SAEA,OACE,yBACEC,UAAW,2CACXC,MAAO,CACLH,QACAD,UAEFK,QAAS,kBAAOH,EAAW,KAAOP,EAAYC,EAAIC,KAClD,yBAAKM,UAAU,WACb,yBACEC,MAAO,CACLJ,SACAC,SAEFE,UAAWL,EAAU,QAAU,OAE/BQ,IAAKR,GAAWC,EAAS,mBAAqB,oBC1BzC,SAASQ,EAAT,GAOX,IANFL,EAMC,EANDA,SACAM,EAKC,EALDA,UACAC,EAIC,EAJDA,MACAX,EAGC,EAHDA,QACAC,EAEC,EAFDA,OACAJ,EACC,EADDA,YAEA,OACE,yBAAKQ,UAAU,SACZM,EAAMC,KAAI,SAAAC,GAAI,OACb,kBAACjB,EAAD,CACEkB,IAAKD,EAAKf,GACVA,GAAIe,EAAKf,GACTC,KAAMc,EAAKd,KACXI,MAAOO,EAAY,IACnBR,OAAQQ,EAAY,IACpBV,QAASA,EAAQe,SAASF,EAAKf,IAC/BG,OAAQA,EAAOc,SAASF,EAAKf,IAC7BD,YAAaA,EACbO,SAAUA,GAAYH,EAAOc,SAASF,EAAKf,UCZtC,SAASkB,IACtB,IAAIlB,EAAK,EA2BT,OAxCF,SAAiBmB,GAEf,IADA,IAAMC,EAASD,EAAME,MAAM,GAClBC,EAAI,EAAGA,EAAIH,EAAMI,OAAS,EAAGD,IAAK,CACzC,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAC9CM,EAAOT,EAAMG,GACjBF,EAAOE,GAAKH,EAAMK,GAClBJ,EAAOI,GAAeI,EAGxB,OAAOR,EA+BAS,CA1BG,CACN,YACA,WACA,OACA,OACA,QACA,cACA,YACA,cACA,eACA,SACA,wBACAC,QAAO,SAACC,EAAK9B,GAWb,OATA8B,EAAIC,KAAK,CACPhC,GAAIA,IACJC,SAGF8B,EAAIC,KAAK,CACPhC,GAAIA,IACJC,SAEK8B,IACN,K,YCjCPE,IAASC,OAAO,mBCID,WAAgB,IAAD,EACFC,mBAAS,IADP,mBACrBtB,EADqB,KACduB,EADc,OAEED,mBAAS,IAFX,mBAErBjC,EAFqB,KAEZmC,EAFY,OAGMF,mBAAS,KAHf,mBAGrBvB,EAHqB,KAGV0B,EAHU,OAIAH,mBAAS,IAJT,mBAIrBhC,EAJqB,KAIboC,EAJa,OAOIJ,oBAAS,GAPb,mBAOrB7B,EAPqB,KAOXkC,EAPW,KAS5BC,qBAAU,WACRC,IACAN,EAASlB,OACR,IAGHuB,qBAAU,WACRE,MAEC9B,GASH,IAwBM8B,EAAgB,WAEpB9B,EAAMC,KAAI,SAAAC,IAGR,IAAI6B,OAAQlC,IAFA,4BAMVmC,EAAa,WACjBR,EAAW,IACXG,GAAY,IAGRM,EAAkB,SAAA9C,GAAE,OAAIE,EAAQe,SAASjB,IAGzC+C,EAAU,SAAC/C,EAAIgD,GAMnB,OAAO,GAEHN,EAAc,WAClBJ,EACEb,KAAKwB,IACHC,SAASC,gBAAgBC,YACzBF,SAASC,gBAAgBE,gBAQ/B,OACE,6BACE,4CACA,0EACA,kBAAC1C,EAAD,CACEC,UAAWA,EACXC,MAAOA,EACPX,QAASA,EACTH,YArEc,SAACC,EAAIC,GAGvB,GADAuC,GAAY,GACW,IAAnBtC,EAAQqB,OACVc,EAAW,CAACrC,IACZwC,GAAY,OAEP,CACL,GAAIM,EAAgB9C,GAAK,OAGzB,GAFAqC,EAAW,CAACnC,EAAQ,GAAIF,IAEpBsD,gCAAsBtD,GAAK,OAC/BqC,EAAW,CAACnC,EAAQ,GAAIF,IACpB+C,EAAQ/C,EAAIC,IAEdsC,EAAU,GAAD,mBAAKpC,GAAL,CAAaD,EAAQ,GAAIF,KAElC6C,KAEAU,WAAWV,EAAY,OAmDvBvC,SAAUA,EACVH,OAAQA,GANV,QDhGU,MAAS+C,SAASM,eAAe,U","file":"static/js/main.b821fdb6.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\nexport default function Card({\n  handleClick,\n  id,\n  type,\n  flipped,\n  solved,\n  height,\n  width,\n  disabled\n}) {\n  return (\n    <div\n      className={'flip-container ${flipped ? \"flipped\" : }'}\n      style={{\n        width,\n        height\n      }}\n      onClick={() => (disabled ? null : handleClick(id, type))}>\n      <div className='flipper'>\n        <img\n          style={{\n            height,\n            width\n          }}\n          className={flipped ? \"front\" : \"back\"}\n          //check to see if its been flipped or solved\n          src={flipped || solved ? \"/img/${type}.png\" : \"/img/back.png\"}\n        />\n      </div>\n    </div>\n  );\n}\n\n//checks and removes squigglies\nCard.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n  solved: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  disabled: PropTypes.bool.isRequired\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Card from \"../Card\";\n\nexport default function Board({\n  disabled,\n  dimension,\n  cards,\n  flipped,\n  solved,\n  handleClick\n}) {\n  return (\n    <div className='board'>\n      {cards.map(card => (\n        <Card\n          key={card.id}\n          id={card.id}\n          type={card.type}\n          width={dimension / 4.5}\n          height={dimension / 4.5}\n          flipped={flipped.includes(card.id)}\n          solved={solved.includes(card.id)}\n          handleClick={handleClick}\n          disabled={disabled || solved.includes(card.id)}\n        />\n      ))}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  dimension: PropTypes.number.isRequired,\n  //cards: PropTypes.arrayOf(PropTypes.Shape({})).isRequired,\n  flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n  solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n  handleClick: PropTypes.func.isRequired\n};\n","//to make sure the cards aren't in any order\nfunction shuffle(array) {\n  const _array = array.slice(0);\n  for (let i = 0; i < array.length - 1; i++) {\n    let randomIndex = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    _array[i] = array[randomIndex];\n    _array[randomIndex] = temp;\n  }\n\n  return _array;\n}\n\nexport default function initializeDeck() {\n  let id = 0,\n    cards = [\n      \"Australia\",\n      \"Colombia\",\n      \"Iran\",\n      \"Iraq\",\n      \"Japan\",\n      \"Puerto Rico\",\n      \"Singapore\",\n      \"South Korea\",\n      \"Saudi Arabia\",\n      \"Turkey\",\n      \"United Arab Emirates\"\n    ].reduce((acc, type) => {\n      //acc is an array, below we're pushing on JS objects. This one starts at 0\n      acc.push({\n        id: id++,\n        type\n      });\n      //then we do it twice, because we want two, this one starts at 1\n      acc.push({\n        id: id++,\n        type\n      });\n      return acc;\n    }, []);\n\n  return shuffle(cards);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","//utilizes the array below\nimport React, { useState, useEffect } from \"react\";\n\n//utilizes saved card function\n//import Card from \"./components/board\";\n\nimport Board from \"./components/Board\";\nimport initializeDeck from \"./deck\";\nimport { isArgumentPlaceholder } from \"@babel/types\";\n\nexport default function App() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  //to disable the board when you flip two cards\n  //default set at false to ensure the board starts enabling the event listner\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n\n  //storing the value of preloaded images\n  useEffect(() => {\n    preLoadImages();\n    //looking at the cards variable\n  }, cards);\n\n  // basically a media query\n  //useEffect(() => {\n  //const resizeListner = window.addEventListner(\"resize\", resizeBoard);\n\n  //return () => window.removeEventListner(\"resize\", resizeListner);\n  //});\n\n  const handleClick = (id, type) => {\n    //logic to flip 2 cards\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n      //and stops the flipping after 2\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n      //confirms two cards have been clicked\n      if (isArgumentPlaceholder(id)) return;\n      setFlipped([flipped[0], id]);\n      if (isMatch(id, type)) {\n        //solved = cards that were previously solved, flipped = the card previously selected, id= the card most recently chosen\n        setSolved([...solved, flipped[0], id]);\n        //lets you try again\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const preLoadImages = () => {\n    //console.log(cards.length);\n    cards.map(card => {\n      const src = \"/img/$(card.type).png\";\n      //console.log(src)\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  //dumps setSolved\n  const isMatch = (id, clickType) => {\n    //const clickedCard = cards.find(card);\n    //card.id === id;\n    //const flippedCard = cards.find(card);\n    //flipped[0] === card.id;\n    //return flippedCard.type === clickType;\n    return true;\n  };\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    );\n  };\n\n  //header and board displayed\n  //class Board extends React.Component {\n\n  return (\n    <div>\n      <h1>WWIII Memory</h1>\n      <h2>Can you remember who the US deals arms to?</h2>\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}>\n        >\n      </Board>\n    </div>\n  );\n  //};\n}\n"],"sourceRoot":""}